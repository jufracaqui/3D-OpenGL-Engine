#version 400 core

in vec2 pasar_coordenadasTextura;
in vec3 normalesSuperficie;
in vec3 vectorALuz;
in vec3 vectorACamara;
in float visibilidad;

out vec4 salida_Color;

uniform sampler2D samplerTextura;
uniform vec3 colorLuz;
uniform float cantidadBrillo;
uniform float reflectividad;
uniform vec3 colorCielo;

void main(void){

	vec3 normalUnitario = normalize(normalesSuperficie);
	vec3 vectorLuzUnitario = normalize(vectorALuz);
	
	float nDotl = dot(normalUnitario, vectorLuzUnitario);
	float brillo = max(nDotl, 0.2);
	vec3 difusion = brillo * colorLuz;
	
	vec3 normalVectorACamara = normalize(vectorACamara);
	vec3 direccionLuz = -vectorLuzUnitario;
	vec3 direccionLuzReflejada = reflect(direccionLuz, normalUnitario);
	
	float factorEspecular = dot(direccionLuzReflejada, normalVectorACamara);
	factorEspecular = max(factorEspecular, 0.0);
	float factorCantidadBrillo = pow(factorEspecular, cantidadBrillo);
	vec3 especularFinal = factorCantidadBrillo * reflectividad * colorLuz;
	
	vec4 colorTextura = texture(samplerTextura, pasar_coordenadasTextura);
	if(colorTextura.a < 0.5){
		discard;
	}
	
	salida_Color = vec4(difusion, 1.0) * colorTextura + vec4(especularFinal, 1.0);
	salida_Color = mix(vec4(colorCielo, 1.0), salida_Color, visibilidad);

}